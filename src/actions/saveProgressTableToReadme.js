import { outputFile } from 'fs-extra/esm';
import { readFile } from 'node:fs/promises';
import { getConfigValue } from '../config.js';
import { logger } from '../logger.js';
import { getPuzzleCompletionData } from '../statistics.js';
import { readmeExists } from '../validation/userFilesExist.js';
import { generateMarkdownProgressTable } from '../tables/markdownProgressTable.js';
/**
 * Regex to find and replace the table in an existing readme.
 */
const tableEnclosingTagRegex = /(<!--START_AUTOGENERATED_COMPLETION_PROGRESS_SECTION-->)(.*?)(<!--END_AUTOGENERATED_COMPLETION_PROGRESS_SECTION-->)/is;

/**
 * Save the table to the users readme file
 * @private
 */
export const saveToReadme = async (value) => {
  const readmePath = getConfigValue('paths.readme');
  const contents = await readFile(readmePath, 'utf-8');

  // ensure the enclosing tag exists
  if (contents.search(tableEnclosingTagRegex) <= 0) {
    throw new Error('Could not find required tag in readme file to insert table, this tag should have been created during the "init" command');
  }
  // replace the content inside of the enclosing tag with the new value.
  const newContents = contents.replace(tableEnclosingTagRegex, `$1\n${value}\n$3`);
  await outputFile(readmePath, newContents);
};

/**
 * Saves a table to the users readme which shows the users progress for the year.
 */
export const saveProgressTableToReadme = async (
  { year, forceSaveProgressToReadme = false } = {},
) => {
  if (year == null) {
    throw new Error('null or undefined year');
  }

  if (!forceSaveProgressToReadme && getConfigValue('disableReadmeAutoSaveProgress')) {
    logger.debug('Skipping saving progress to README because feature is disabled in config');
    return;
  }

  if (!await readmeExists()) {
    logger.error('Could not find README file in your repository. This file should have been created by the "init" command');
    return;
  }

  const completionData = await getPuzzleCompletionData(year);

  if (completionData.length === 0) {
    logger.festive('You have not submitted any puzzles yet, please run this command after submitting a puzzle');
    return;
  }

  const tableText = await generateMarkdownProgressTable(year, completionData);
  await saveToReadme(tableText);
  logger.festive('Saved progress to your README file');
};
