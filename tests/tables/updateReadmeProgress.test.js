import { describe, jest, test, afterEach } from '@jest/globals';
import { mockConfig, mockLogger } from '../mocks.js';

// setup mocks
mockLogger();
mockConfig();
jest.unstable_mockModule('node:fs/promises', () => ({ readFile: jest.fn() }));
jest.unstable_mockModule('fs-extra/esm', () => ({ outputFile: jest.fn() }));
jest.unstable_mockModule('src/validation/userFilesExist.js', () => ({
  readmeExists: jest.fn(),
}));

// import after setting up mocks
const { readFile } = await import('node:fs/promises');
const { outputFile } = await import('fs-extra/esm');
const { readmeExists } = await import('../../src/validation/userFilesExist.js');
const { updateReadmeProgress } = await import(
  '../../src/tables/updateReadmeProgress.js'
);

describe('updateReadmeProgress()', () => {
  afterEach(() => {
    jest.resetAllMocks();
  });

  test.each([null, undefined, ''])(
    'throws if markdownTable is: "%s"',
    async (markdownTable) => {
      await expect(async () =>
        updateReadmeProgress(markdownTable)
      ).rejects.toThrow();
    }
  );

  test('throws error if readme does not exist', async () => {
    readmeExists.mockResolvedValue(false);
    await expect(async () =>
      updateReadmeProgress('Cool Table!')
    ).rejects.toThrow();
  });

  test('throws error if readme is missing enclosing tag', async () => {
    readmeExists.mockResolvedValue(true);
    readFile.mockResolvedValue('ASDF ASDF ASDF!');
    await expect(async () => updateReadmeProgress('ASDF')).rejects.toThrow();
  });

  test('replaces content of enclosing tag', async () => {
    const originalFileContents =
      '\n<!--START_AUTOGENERATED_COMPLETION_PROGRESS_SECTION-->ORIGINAL CONTENT BLAH BLAH<!--END_AUTOGENERATED_COMPLETION_PROGRESS_SECTION-->';
    readmeExists.mockResolvedValue(true);
    readFile.mockResolvedValue(originalFileContents);
    const input = 'NEW FILE CONTENTS HA HA HA!';
    await updateReadmeProgress(input);
    expect(outputFile).toHaveBeenCalledWith(
      undefined,
      `\n<!--START_AUTOGENERATED_COMPLETION_PROGRESS_SECTION-->\n${input}\n<!--END_AUTOGENERATED_COMPLETION_PROGRESS_SECTION-->`
    );
  });
});
